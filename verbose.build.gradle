plugins {
    id 'idea'
    id 'groovy'
    id 'io.franzbecker.gradle-lombok' version '3.1.0'
    id 'com.github.ben-manes.versions' version '0.22.0'
}

group = 'com.github.daggerok.eventsourcedusermanagement'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
}

wrapper {
    gradleVersion = '5.6'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.0.pr1'
    implementation 'io.vavr:vavr:0.10.2'

    implementation(platform('org.springframework:spring-framework-bom:5.1.9.RELEASE'))
    implementation 'org.springframework:spring-context-support'

    // annotationProcessor 'org.projectlombok:lombok'
    // testCompileOnly 'org.projectlombok:lombok'

    implementation(platform('org.apache.logging.log4j:log4j-bom:2.12.1'))
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'

    testImplementation(platform('org.spockframework:spock-bom:1.3-RC1-groovy-2.5'))
    testImplementation 'org.spockframework:spock-core'
    // testRuntime 'org.codehaus.groovy:groovy'
}

ext {
    mainClassName = 'com.github.daggerok.usermanagement.UserManagementApplication'
}

jar {
    manifest {
        attributes('Main-Class': mainClassName)
    }
}

task fatJar(type: Jar) {
    archiveClassifier.set('all')
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes('Main-Class': mainClassName)
    }
    from(configurations
            .runtimeClasspath
            .collect {
                println("lib: $it.absolutePath")
                it.isDirectory() ? it : zipTree(it)
            })
    sourceSets.main.allSource.each { println("app: $it.absolutePath") }
    from(sourceSets.main.output)
    with jar
}

test {
    testLogging {
        showExceptions = true
        showStandardStreams = true
        events 'passed', 'skipped', 'failed'
    }
}

defaultTasks 'clean', 'build'
